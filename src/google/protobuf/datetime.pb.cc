// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/datetime.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include <google/protobuf/datetime.pb.h>

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* DateTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DateTime_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TimeSpanScale_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_google_2fprotobuf_2fdatetime_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_google_2fprotobuf_2fdatetime_2eproto() {
  protobuf_AddDesc_google_2fprotobuf_2fdatetime_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "google/protobuf/datetime.proto");
  GOOGLE_CHECK(file != NULL);
  DateTime_descriptor_ = file->message_type(0);
  static const int DateTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateTime, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateTime, scale_),
  };
  DateTime_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DateTime_descriptor_,
      DateTime::default_instance_,
      DateTime_offsets_,
      -1,
      -1,
      -1,
      sizeof(DateTime),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateTime, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateTime, _is_default_instance_));
  TimeSpanScale_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_google_2fprotobuf_2fdatetime_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DateTime_descriptor_, &DateTime::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_google_2fprotobuf_2fdatetime_2eproto() {
  delete DateTime::default_instance_;
  delete DateTime_reflection_;
}

void protobuf_AddDesc_google_2fprotobuf_2fdatetime_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_google_2fprotobuf_2fdatetime_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036google/protobuf/datetime.proto\022\017google"
    ".protobuf\"H\n\010DateTime\022\r\n\005value\030\001 \001(\022\022-\n\005"
    "scale\030\002 \001(\0162\036.google.protobuf.TimeSpanSc"
    "ale*g\n\rTimeSpanScale\022\010\n\004DAYS\020\000\022\t\n\005HOURS\020"
    "\001\022\013\n\007MINUTES\020\002\022\013\n\007SECONDS\020\003\022\020\n\014MILLISECO"
    "NDS\020\004\022\t\n\005TICKS\020\005\022\n\n\006MINMAX\020\017B\177\n\023com.goog"
    "le.protobufB\rDateTimeProtoP\001Z*github.com"
    "/golang/protobuf/ptypes/datetime\240\001\001\370\001\001\242\002"
    "\003GPB\252\002\036Google.Protobuf.WellKnownTypesb\006p"
    "roto3", 365);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/protobuf/datetime.proto", &protobuf_RegisterTypes);
  DateTime::default_instance_ = new DateTime();
  DateTime::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_google_2fprotobuf_2fdatetime_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_google_2fprotobuf_2fdatetime_2eproto {
  StaticDescriptorInitializer_google_2fprotobuf_2fdatetime_2eproto() {
    protobuf_AddDesc_google_2fprotobuf_2fdatetime_2eproto();
  }
} static_descriptor_initializer_google_2fprotobuf_2fdatetime_2eproto_;
const ::google::protobuf::EnumDescriptor* TimeSpanScale_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeSpanScale_descriptor_;
}
bool TimeSpanScale_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 15:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DateTime::kValueFieldNumber;
const int DateTime::kScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DateTime::DateTime()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.protobuf.DateTime)
}

DateTime::DateTime(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.protobuf.DateTime)
}

void DateTime::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DateTime::DateTime(const DateTime& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.protobuf.DateTime)
}

void DateTime::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  scale_ = 0;
}

DateTime::~DateTime() {
  // @@protoc_insertion_point(destructor:google.protobuf.DateTime)
  SharedDtor();
}

void DateTime::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void DateTime::ArenaDtor(void* object) {
  DateTime* _this = reinterpret_cast< DateTime* >(object);
  (void)_this;
}
void DateTime::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DateTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DateTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DateTime_descriptor_;
}

const DateTime& DateTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2fdatetime_2eproto();
  return *default_instance_;
}

DateTime* DateTime::default_instance_ = NULL;

DateTime* DateTime::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DateTime>(arena);
}

void DateTime::Clear() {
// @@protoc_insertion_point(message_clear_start:google.protobuf.DateTime)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DateTime, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DateTime*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(value_, scale_);

#undef ZR_HELPER_
#undef ZR_

}

bool DateTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.protobuf.DateTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_scale;
        break;
      }

      // optional .google.protobuf.TimeSpanScale scale = 2;
      case 2: {
        if (tag == 16) {
         parse_scale:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_scale(static_cast< ::google::protobuf::TimeSpanScale >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.protobuf.DateTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.protobuf.DateTime)
  return false;
#undef DO_
}

void DateTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.protobuf.DateTime)
  // optional sint64 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->value(), output);
  }

  // optional .google.protobuf.TimeSpanScale scale = 2;
  if (this->scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->scale(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.protobuf.DateTime)
}

::google::protobuf::uint8* DateTime::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.protobuf.DateTime)
  // optional sint64 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->value(), target);
  }

  // optional .google.protobuf.TimeSpanScale scale = 2;
  if (this->scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->scale(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.protobuf.DateTime)
  return target;
}

int DateTime::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:google.protobuf.DateTime)
  int total_size = 0;

  // optional sint64 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->value());
  }

  // optional .google.protobuf.TimeSpanScale scale = 2;
  if (this->scale() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->scale());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DateTime::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.protobuf.DateTime)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DateTime* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DateTime>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.protobuf.DateTime)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.protobuf.DateTime)
    MergeFrom(*source);
  }
}

void DateTime::MergeFrom(const DateTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.protobuf.DateTime)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.scale() != 0) {
    set_scale(from.scale());
  }
}

void DateTime::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.protobuf.DateTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DateTime::CopyFrom(const DateTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.protobuf.DateTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTime::IsInitialized() const {

  return true;
}

void DateTime::Swap(DateTime* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DateTime temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void DateTime::UnsafeArenaSwap(DateTime* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DateTime::InternalSwap(DateTime* other) {
  std::swap(value_, other->value_);
  std::swap(scale_, other->scale_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DateTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DateTime_descriptor_;
  metadata.reflection = DateTime_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DateTime

// optional sint64 value = 1;
void DateTime::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 DateTime::value() const {
  // @@protoc_insertion_point(field_get:google.protobuf.DateTime.value)
  return value_;
}
 void DateTime::set_value(::google::protobuf::int64 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:google.protobuf.DateTime.value)
}

// optional .google.protobuf.TimeSpanScale scale = 2;
void DateTime::clear_scale() {
  scale_ = 0;
}
 ::google::protobuf::TimeSpanScale DateTime::scale() const {
  // @@protoc_insertion_point(field_get:google.protobuf.DateTime.scale)
  return static_cast< ::google::protobuf::TimeSpanScale >(scale_);
}
 void DateTime::set_scale(::google::protobuf::TimeSpanScale value) {
  
  scale_ = value;
  // @@protoc_insertion_point(field_set:google.protobuf.DateTime.scale)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
